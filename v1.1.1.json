{"meta":{"generator":"0.9.0","format":20,"date":1600565895196},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://smart-systems.xyz\"><img src=\"https://cdn.discordapp.com/attachments/628756152972214283/744839487326257222/SSBannerC.png\" width=\"700px\" alt=\"SMS Logo\" id=\"banner\" /></a>\n  </p>\n  <br>\n  <p>\n    <a href=\"https://discord.gg/J7j4wJQ\"><img src=\"https://img.shields.io/discord/651322583328751627?color=7289da&logo=discord&logoColor=white\" alt=\"Discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/smartoauth\"><img src=\"https://img.shields.io/npm/v/smartoauth.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/smartoauth\"><img src=\"https://img.shields.io/npm/dt/smartoauth.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://travis-ci.org/SmartSystemsGithub/smartoauth\"><img src=\"https://travis-ci.org/SmartSystemsGithub/smartoauth.svg\" alt=\"Build status\" /></a>\n    <a href=\"https://david-dm.org/SmartSystemsGithub/smartoauth\"><img src=\"https://img.shields.io/david/SmartSystemsGithub/smartoauth.svg?maxAge=3600\" alt=\"Dependencies\" /></a></a>\n    <a href=\"https://app.fossa.com/projects/git%2Bgithub.com%2FSmartSystemsGithub%2FSmartOAuth?ref=badge_shield\" alt=\"FOSSA Status\"><img src=\"https://app.fossa.com/api/projects/git%2Bgithub.com%2FSmartSystemsGithub%2FSmartOAuth.svg?type=shield\"/></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/smartoauth/\"><img src=\"https://nodei.co/npm/smartoauth.png?downloads=true&stars=true\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n# SmartOAuth\n\nWelcome to the documentation.\n\n## About\n\nSmartOauth is the newest and easiest npm module that allows you to eaisly add oauth to your site.\n\n\n## Installation\n\nNPM Command: `npm install SmartOAuth` \n\n\n## Example usage\n\nComing soon!\n\n## Links\n\n- [Website](https://beta.smart-systems.xyz/)\n- [Documentation](https://docs.smart-systems.xyz)\n- [GitHub](https://github.com/SmartSystemsGithub/SmartOAuth)\n- [NPM](https://www.npmjs.com/package/smartoauth)\n\n## License\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2FSmartSystemsGithub%2FSmartOAuth.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2FSmartSystemsGithub%2FSmartOAuth?ref=badge_large)","path":"docs/general/welcome.md"},"changelog":{"name":"Changelog","type":"md","content":"# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n- Click Above to compare with unreleased features.\n\n## [1.1.1] - 2020-09-20\n### Added\n- GetURL() for Discord OAuth\n- GetURL() for Github OAuth\n- Added Scope Support for Discord OAuth.\n    - NOTE: Only `user` is supported until future releases.\n- Added Scope Support for GitHub OAuth.\n    - NOTE: Only `user` is supported until future releases.\n- Updated docs with Full Examples on how to setup SmartOAuth.\n\n## [1.1.0] - 2020-09-3\n### Added\n- Base Features. First Release.\n\n\n[Unreleased]: https://github.com/SmartSystemsGithub/SmartOAuth/compare/v1.1.1...master\n[1.1.0]: https://github.com/SmartSystemsGithub/SmartOAuth/releases/tag/v1.1.0\n[1.1.1]: https://github.com/SmartSystemsGithub/SmartOAuth/releases/tag/v1.1.1\n","path":"docs/general/changelog.md"}}},"examples":{"name":"Examples","files":{"createserver":{"name":"Creating A Server","type":"md","content":"# Creating A Server\n\nTo start use to SmartOAuth, we suggest to learn the basics by creating an [express](https://npmjs.com/package/express) server.\n\nThis can be done by using this simple scalfold.\n\n```js\nconst express = require('express')\nlet app = express()\n```\n\nFrom there, we can now run a basic server\n\n```js\nconst express = require('express')\nlet app = express()\n\napp.get(\"/\", async(req,res) => {\n    res.send(__dirname + 'path to your HTML FILE')\n});\n\napp.listen(8080)\n```\n\nFinally, our last step is to create a callback. This will be used later. You can change /login to whatever you like.\n```js\nconst express = require('express')\nlet app = express()\n\napp.get(\"/\", async(req,res) => {\n    res.send(__dirname + 'path to your HTML FILE')\n});\n\napp.get(\"/login\", async(req,res) => {\n   // See the other pages for handling the login\n});\n\napp.listen(8080)\n```\n","path":"docs/examples/createserver.md"},"adddiscord":{"name":"Adding Discord Intergration","type":"md","content":"# Adding Discord OAuth to the Server\n\nPlease make sure you have followed the Creating A Server tutorial. You are required to have finished that before adding Discord OAuth. \n\n### Creating a Discord App.\n\nFirstly, head to [https://discord.com/developers/applications/me](https://discord.com/developers/applications/me).\n\nFrom there, create a new application.\n\n![Click on the \"New Application\" button.](https://cdn.discordapp.com/attachments/757009063333855263/757009076629536808/unknown.png)\n\nThen, you can name the application whatever you would like it to be. After that, push \"Create\".\n\n![Push \"Create\"](https://cdn.discordapp.com/attachments/757009063333855263/757009856233340968/unknown.png)\n\nNow, you can set the picture that you would like users to see once they get to your OAuth.\n\n![Set the picture and copy the Client Secret and Client ID.](https://cdn.discordapp.com/attachments/757009063333855263/757010433474297906/unknown.png)\n\nAfter you have done that, save the Client ID and Client Secret, ready for us to put it into our code.\n\n### Adding Discord to the Server\n\nBy now, you should also have your server setup done. \n\nLet's add our discord OAuth handler in.\n\n```js\nconst express = require('express')\nlet app = express()\nlet oauth = require('smartoauth')\nlet DiscordClient = new oauth.Discord({\n    client_secret: \"\",\n    client_id: \"\",\n    callback: \"http://localhost:8080/login\"\n})\n\napp.get(\"/\", async(req,res) => {\n    res.send(__dirname + 'path to your HTML FILE')\n});\n\napp.get(\"/login\", async(req,res) => {\n   // This is next!\n});\n\napp.listen(8080)\n```\nMake sure to fill in your Client Secret and Client ID Values, as well as the callback being the page you set. (/login was the example, but it can be changed to whatever you would like it to be!). The client secret is to be kept secret, so if you are hosting it on a platform that is not private (Glitch.com or Repl.it), make sure to add the client secret to your .env file.\n\nFrom there, we can now handle a request.\n\n```js\nconst express = require('express');\nlet app = express()\nlet oauth = require('smartoauth')\nlet DiscordClient = new oauth.Discord({\n    client_secret: \"\",\n    client_id: \"\",\n    callback: \"http://localhost:8080/login\"\n})\n\napp.get(\"/\", async(req,res) => {\n    res.send(__dirname + 'path to your HTML FILE')\n});\n\napp.get(\"/login\", async(req,res) => {\n    let user = DiscordClient.getUserFromCode(req.query.code)\n    console.log(user)\n    console.log(user.username + user.discriminator)\n    console.log(user.userid)\n});\n\napp.listen(8080)\n```\n\nWe have now got the user from the code, although we are stuck with one problem...\n\nThe code can only be used once.\n\n## Session Storing\n\nThe way to get around this problem is session storing. Make sure you have the [cookie-parser](https://www.npmjs.com/package/cookie-parser) package installed. \n\nLet's start by setting up the cookie parser.\n\n```js\nconst express = require('express');\nconst cookieParser = require('cookie-parser'); \nlet app = express()\nlet oauth = require('smartoauth')\nlet DiscordClient = new oauth.Discord({\n    client_secret: \"\",\n    client_id: \"\",\n    callback: \"http://localhost:8080/login\"\n})\n\napp.use(cookieParser()); \n\napp.get(\"/\", async(req,res) => {\n    res.send(__dirname + 'path to your HTML FILE')\n});\n\napp.get(\"/login\", async(req,res) => {\n    let user = DiscordClient.getUserFromCode(req.query.code)\n    console.log(user)\n    console.log(user.username + user.discriminator)\n    console.log(user.userid)\n});\n\napp.listen(8080)\n```\nFrom there, we can now set it up to get the token from the code, so that we can re-use the token.\n\nFor this simple example, we'll set it up so if there isn't a cookie, or if the token is invalid it will redirect you to the login page.\n\nThis does look crazy, but I decided to give it to you all in one go, instead of doing it in steps. \n\n```js\nconst express = require('express');\nconst cookieParser = require('cookie-parser'); \nlet app = express()\nlet oauth = require('smartoauth')\nlet DiscordClient = new oauth.Discord({\n    client_secret: \"\",\n    client_id: \"\",\n    callback: \"\"\n})\n\nDiscordClient.addScopes(['user']) // Add the \"scope\" of the oAuth link. More detail will come in a later tutorial.\n\napp.use(cookieParser()); \n\napp.get(\"/\", async(req,res) => {\n    res.sendFile(__dirname + 'path to your HTML FILE')\n});\n\napp.get(\"/login\", async(req,res) => {\n    if (req.query.code) { // If there is a code...\n        try { // Then TRY to get the token.\n            DiscordClient.getToken(req.query.code).then(async token => {\n                res.cookie('discordtoken', token.access_token) // If there is, set it as a cookie!\n                console.log(`Set Cookie!`)\n                DiscordClient.getUserFromToken(token.access_token).then(async user => { // Get the user from the token. :)\n                    res.send(`Hello ${user.username}!`)\n                })\n            })\n        }\n        catch(err) { // If we error while getting the user, redirect back to the login page as it'll be an invalid token.\n            res.redirect(DiscordClient.getURL()) \n        }\n    } else { // If we don't have a code given...\n        if (!req.cookies.discordtoken) { // And if there is no token stored...\n            res.redirect(DiscordClient.getURL()) // Redirect to login.\n        } else { // If there is a token.\n            try {\n                DiscordClient.getUserFromToken(req.cookies.discordtoken).then(async user => { // Get the user from the token\n                    res.send(`Hello ${user.username}!`)\n                })\n            }\n            catch(err) { // If that fails then...\n                console.error(err)\n                res.clearCookie('discordtoken') // Remove the token\n                res.redirect(DiscordClient.getURL()) // Redirect back to login.\n            }\n        }\n    }\n});\n\napp.listen(8080)\n```\n\n### End\n\nI hope this tutorial has helped you start you DiscordOAuth journey. If you have any questions, you can DM me at Sasial#9375 on discord, or join the [SmartSystems](https://discord.gg/J7j4wJQ) discord server.","path":"docs/examples/adddiscord.md"},"addgithub":{"name":"Adding Github Intergation","type":"md","content":"# Adding GitHub OAuth to the Server\n\nPlease make sure you have followed the Creating A Server tutorial. You are required to have finished that before adding GitHub OAuth. \n\n### Creating a GitHub App.\n\nFirstly, head to https://github.com/settings/developers.\n\nFrom there, create a New OAuth App.\n\n![Click on the \"New OAuth App\" button.](https://cdn.discordapp.com/attachments/757009063333855263/757042771701006376/unknown.png)\n\nThen, you can name the application whatever you would like it to be.\nAfter that, fill in the other required fields. Then, push \"Create\".\n\n![Fill in the fields and then push \"Create\"](https://cdn.discordapp.com/attachments/757009063333855263/757043387177369600/unknown.png)\n\nNow, you can set the picture that you would like users to see once they get to your OAuth.\n\n![Set the picture and copy the Client Secret and Client ID.](https://cdn.discordapp.com/attachments/757009063333855263/757044882643746856/unknown.png)\n\nAfter you have done that, save the Client ID and Client Secret, ready for us to put it into our code.\n\n### Adding GitHub OAuth to the Server\n\nBy now, you should also have your server setup done. \n\nLet's add our discord OAuth handler in.\n\n```js\nconst express = require('express')\nlet app = express()\nlet oauth = require('smartoauth')\nlet GitHubClient = new oauth.Github({\n    client_secret: \"\",\n    client_id: \"\",\n    callback: \"http://localhost:8080/login\"\n})\n\napp.get(\"/\", async(req,res) => {\n    res.send(__dirname + 'path to your HTML FILE')\n});\n\napp.get(\"/login\", async(req,res) => {\n   // This is next!\n});\n\napp.listen(8080)\n```\nMake sure to fill in your Client Secret and Client ID Values, as well as the callback being the page you set. (/login was the example, but it can be changed to whatever you would like it to be!). The client secret is to be kept secret, so if you are hosting it on a platform that is not private (Glitch.com or Repl.it), make sure to add the client secret to your .env file.\n\nFrom there, we can now handle a request.\n\n```js\nconst express = require('express')\nlet app = express()\nlet oauth = require('smartoauth')\nlet GitHubClient = new oauth.Github({\n    client_secret: \"\",\n    client_id: \"\",\n    callback: \"http://localhost:8080/login\"\n})\n\napp.get(\"/\", async(req,res) => {\n    res.send(__dirname + 'path to your HTML FILE')\n});\n\napp.get(\"/login\", async(req,res) => {\n    let user = GitHubClient.getUserFromCode(req.query.code)\n    console.log(user)\n    console.log(user.username)\n    console.log(user.userid)\n});\n\napp.listen(8080)\n```\n\nWe have now got the user from the code, although we are stuck with one problem...\n\nThe code can only be used once.\n\n## Session Storing\n\nThe way to get around this problem is session storing. Make sure you have the [cookie-parser](https://www.npmjs.com/package/cookie-parser) package installed. \n\nLet's start by setting up the cookie parser.\n\n```js\nconst express = require('express')\nconst cookieParser = require('cookie-parser'); \nlet app = express()\nlet oauth = require('smartoauth')\nlet GitHubClient = new oauth.Github({\n    client_secret: \"\",\n    client_id: \"\",\n    callback: \"http://localhost:8080/login\"\n})\n\napp.use(cookieParser()); \n\napp.get(\"/\", async(req,res) => {\n    res.send(__dirname + 'path to your HTML FILE')\n});\n\napp.get(\"/login\", async(req,res) => {\n    let user = GitHubClient.getUserFromCode(req.query.code)\n    console.log(user)\n    console.log(user.username)\n    console.log(user.userid)\n});\n\napp.listen(8080)\n```\nFrom there, we can now set it up to get the token from the code, so that we can re-use the token.\n\nFor this simple example, we'll set it up so if there isn't a cookie, or if the token is invalid it will redirect you to the login page.\n\nThis does look crazy, but I decided to give it to you all in one go, instead of doing it in steps. \n\n```js\nconst express = require('express');\nconst cookieParser = require('cookie-parser'); \nlet app = express()\nlet oauth = require('smartoauth')\nlet GitHubClient = new oauth.Github({\n    client_secret: \"3d760fecd8f98b5fb7786bea818c91397b3155d3\",\n    client_id: \"0021de76a3bf12d635ea\",\n    callback: \"http://localhost:8080/login\"\n})\n\nGitHubClient.addScopes(['user']) // Add the \"scope\" of the oAuth link. More detail will come in a later tutorial.\n\napp.use(cookieParser()); \n\napp.get(\"/\", async(req,res) => {\n    res.sendFile(__dirname + 'path to your HTML FILE')\n});\n\napp.get(\"/login\", async(req,res) => {\n    if (req.query.code) { // If there is a code...\n        try { // Then TRY to get the token.\n            GitHubClient.getToken(req.query.code).then(async token => {\n                console.log(token)\n                res.cookie('githubtoken', token.access_token) // If there is, set it as a cookie!\n                console.log(`Set Cookie!`)\n                GitHubClient.getUserFromToken(token.access_token).then(async user => { // Get the user from the token. :)\n                    res.send(`Hello ${user.username}!`)\n                })\n            })\n        }\n        catch(err) { // If we error while getting the user, redirect back to the login page as it'll be an invalid token.\n            res.redirect(GitHubClient.getURL()) \n        }\n    } else { // If we don't have a code given...\n        if (!req.cookies.githubtoken) { // And if there is no token stored...\n            res.redirect(GitHubClient.getURL()) // Redirect to login.\n        } else { // If there is a token.\n            try {\n                GitHubClient.getUserFromToken(req.cookies.githubtoken).then(async user => { // Get the user from the token\n                    res.send(`Hello ${user.username}!`)\n                })\n            }\n            catch(err) { // If that fails then...\n                console.error(err)\n                res.clearCookie('githubtoken') // Remove the token\n                res.redirect(GitHubClient.getURL()) // Redirect back to login.\n            }\n        }\n    }\n});\n\napp.listen(8080)\n```\n\n### End\n\nI hope this tutorial has helped you start you DiscordOAuth journey. If you have any questions, you can DM me at Sasial#9375 on discord, or join the [SmartSystems](https://discord.gg/J7j4wJQ) discord server.","path":"docs/examples/addgithub.md"}}}},"classes":[{"name":"Discord","description":"Discord\nRepresents the class for a discord-oauth.","construct":{"name":"Discord","description":"Creates an instance of the DiscordOAuth Client.","params":[{"name":"Config","description":"A JSON with the configuration for the discord oauth.","type":[[["Object"]]]}]},"props":[{"name":"Scopes","description":"The scopes set.","type":[[["Array","<"],["String",">"]]],"meta":{"line":26,"file":"discordauth.js","path":"src/discord"}}],"methods":[{"name":"getToken","description":"This function gives the ability to get a User's token. This is not to be confused with GetUser.","params":[{"name":"code","description":"The code provided with the discord callback.","type":[[["String"]]]}],"async":true,"returns":{"types":[[["String"]]],"description":"The User's token."},"meta":{"line":36,"file":"discordauth.js","path":"src/discord"}},{"name":"getUserFromCode","description":"This functions gives the ability to get information about the user from the code.","params":[{"name":"code","description":"The code provided with the discord callback.","type":[[["String"]]]}],"async":true,"returns":{"types":[[["DiscordUser"]]],"description":"The DiscordUser class is retured which shows the users, ID, profile picture and Nitro status."},"meta":{"line":65,"file":"discordauth.js","path":"src/discord"}},{"name":"getUserFromToken","description":"This functions gives the ability to get information about the user from the token.","params":[{"name":"token","description":"The token is provided using the getToken method.","type":[[["String"]]]}],"async":true,"returns":{"types":[[["DiscordUser"]]],"description":"The DiscordUser class is retured which shows the users, ID, profile picture and Nitro status."},"meta":{"line":98,"file":"discordauth.js","path":"src/discord"}},{"name":"addScopes","description":"This functions gives the ability to set the scopes for the redirect URL for discord.","params":[{"name":"Scopes","description":"The scopes to add.","type":[[["Array","<"],["String",">"]]]}],"async":true,"returns":{"types":[[["Array","<"],["String",">"]]],"description":"The scopes that are currently added."},"meta":{"line":114,"file":"discordauth.js","path":"src/discord"}},{"name":"getURL","description":"This functions gives the ability to get the redirect URL for discord.","async":true,"returns":{"types":[[["String"]]],"description":"The URL to use for redirection."},"meta":{"line":129,"file":"discordauth.js","path":"src/discord"}},{"name":"GitHub#addScopes","description":"This functions gives the ability to set the scopes for the redirect URL.","scope":"static","params":[{"name":"Scopes","description":"The scopes to add.","type":[[["Array","<"],["String",">"]]]}],"async":true,"returns":{"types":[[["Array","<"],["String",">"]]],"description":"The scopes that are currently added."},"meta":{"line":134,"file":"githubauth.js","path":"src/github"}},{"name":"GitHub#getURL","description":"This functions gives the ability to get the redirect URL.","scope":"static","async":true,"returns":{"types":[[["String"]]],"description":"The URL to use for redirection."},"meta":{"line":149,"file":"githubauth.js","path":"src/github"}}],"meta":{"line":20,"file":"discordauth.js","path":"src/discord"}},{"name":"DiscordUser","description":"DiscordUser\nRepresents the class for a DiscordOAuth User.","construct":{"name":"DiscordUser","description":"Creates an instance of the Github-based OAuth Client.","params":[{"name":"Config","description":"The data of the user.","type":[[["Object"]]]}]},"props":[{"name":"userid","description":"userid - The user's id.","type":[[["string"]]],"meta":{"line":22,"file":"discorduser.js","path":"src/discord"}},{"name":"username","description":"username - The username of the user","type":[[["string"]]],"meta":{"line":30,"file":"discorduser.js","path":"src/discord"}},{"name":"discriminator","description":"discriminator - The discriminator of the user.","type":[[["string"]]],"meta":{"line":38,"file":"discorduser.js","path":"src/discord"}},{"name":"avatar","description":"avatar - User's avatar..","type":[[["string"]]],"meta":{"line":47,"file":"discorduser.js","path":"src/discord"}},{"name":"bot","description":"bot - If the user is a bot.","type":[[["boolean"]]],"meta":{"line":56,"file":"discorduser.js","path":"src/discord"}},{"name":"mfa","description":"mfa - If the user has two factor/muti factor authentication on.","type":[[["boolean"]]],"meta":{"line":65,"file":"discorduser.js","path":"src/discord"}},{"name":"locale","description":"locale - What language the user has set.","type":[[["string"]]],"meta":{"line":74,"file":"discorduser.js","path":"src/discord"}},{"name":"verified_email","description":"verified_email - Whether the user's email has been verified","type":[[["boolean"]]],"meta":{"line":82,"file":"discorduser.js","path":"src/discord"}}],"meta":{"line":13,"file":"discorduser.js","path":"src/discord"}},{"name":"GitHub","description":"Github\nRepresents the class for a github-based-oauth.","construct":{"name":"GitHub","description":"Creates an instance of the Github-based OAuth Client.","params":[{"name":"Config","description":"A JSON with the configuration for the github oauth.","type":[[["Object"]]]}]},"props":[{"name":"Scopes","description":"The scopes set.","type":[[["Array","<"],["String",">"]]],"meta":{"line":26,"file":"githubauth.js","path":"src/github"}}],"methods":[{"name":"getToken","description":"This function gives the ability to get a User's token. This is not to be confused with GetUserFromToken/GetUserFromCode.","params":[{"name":"code","description":"The code provided with the discord callback.","type":[[["String"]]]}],"async":true,"returns":{"types":[[["String"]]],"description":"The User's token."},"meta":{"line":36,"file":"githubauth.js","path":"src/github"}},{"name":"getUserFromToken","description":"This functions gives the ability to get information about the user from the TOKEN. You may want to use GetUserFromCode instead.","params":[{"name":"token","description":"The code provided with the GitHub callback.","type":[[["String"]]]}],"async":true,"returns":{"types":[[["GithubUser"]]],"description":"An Object is retured which shows the username, ID, avatar and more."},"meta":{"line":70,"file":"githubauth.js","path":"src/github"}},{"name":"getUserFromCode","description":"This functions gives the ability to get information about the user from the callback CODE. You may want to use GetUserFromToken instead.","params":[{"name":"code","description":"The code provided with the github callback.","type":[[["String"]]]}],"async":true,"returns":{"types":[[["GithubUser"]]],"description":"An Object is retured which shows the username, ID, avatr and more."},"meta":{"line":92,"file":"githubauth.js","path":"src/github"}}],"meta":{"line":20,"file":"githubauth.js","path":"src/github"}},{"name":"GithubUser","description":"GithubUser\nRepresents the class for a github-oauth User.","construct":{"name":"GithubUser","description":"Creates an instance of the Github-based OAuth Client.","params":[{"name":"Config","description":"The data of the user.","type":[[["Object"]]]}]},"props":[{"name":"username","description":"username - The username of the user","type":[[["string"]]],"meta":{"line":22,"file":"githubuser.js","path":"src/github"}},{"name":"userid","description":"userid - The id of the user","type":[[["number"]]],"meta":{"line":30,"file":"githubuser.js","path":"src/github"}},{"name":"avatar","description":"avatar - The URL to the avatar of the user","type":[[["string"]]],"meta":{"line":38,"file":"githubuser.js","path":"src/github"}},{"name":"bio","description":"bio - The bio of the user.","type":[[["string"]]],"meta":{"line":46,"file":"githubuser.js","path":"src/github"}},{"name":"mfa","description":"mfa - If the user has two factor/muti factor authentication on.","type":[[["boolean"]]],"meta":{"line":54,"file":"githubuser.js","path":"src/github"}},{"name":"location","description":"location - The location the user has set themselves to be shown as.","type":[[["string"]]],"meta":{"line":62,"file":"githubuser.js","path":"src/github"}},{"name":"email","description":"email - The email the user has set themselves to have.","type":[[["string"]]],"meta":{"line":70,"file":"githubuser.js","path":"src/github"}},{"name":"twitter","description":"twitter - The Twitter Username the user has set themselves to have.","type":[[["string"]]],"meta":{"line":78,"file":"githubuser.js","path":"src/github"}},{"name":"plan","description":"plan - The Github plan the user is on.","type":[[["Object"]]],"meta":{"line":86,"file":"githubuser.js","path":"src/github"}},{"name":"repos","description":"repos - The repos the user owns.","type":[[["Object"]]],"meta":{"line":94,"file":"githubuser.js","path":"src/github"}},{"name":"gists","description":"gists - The repos the user owns.","type":[[["Object"]]],"meta":{"line":105,"file":"githubuser.js","path":"src/github"}}],"meta":{"line":13,"file":"githubuser.js","path":"src/github"}}],"interfaces":[],"typedefs":[],"externals":[]}